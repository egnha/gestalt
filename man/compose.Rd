% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compose.R
\name{compose}
\alias{compose}
\alias{\%>>>\%}
\alias{\%<<<\%}
\title{Compose functions}
\usage{
compose(...)

fst \%>>>\% snd

snd \%<<<\% fst
}
\arguments{
\item{...}{Functions or lists thereof to compose. Lists of functions are
automatically spliced in. (Explicit \link[rlang:quasiquotation]{splicing} via
\code{!!!} is also supported.) Following convention, functions are composed from
right to left.}

\item{fst, snd}{Functions.}
}
\value{
\code{compose()}, \code{\%<<<\%} and \code{\%>>>\%} return a function
composition, whose \link[base:formals]{formals} match those of the initial
function called (as a closure).
}
\description{
Compose functions in three ways:
\itemize{
\item Using \code{compose()}: \code{compose(f, g)} is the function that calls \code{g} followed
by \code{f}. It has the \link[base:formals]{formals} of \code{g}.
\item Using \code{\%<<<\%} (\dQuote{backward} composition): \code{f \%<<<\% g}
is another way to express \code{compose(f, g)}.
\item Using \code{\%>>>\%} (\dQuote{forward} composition): \code{f \%>>>\% g}
is another way to express \code{compose(g, f)}.
}

Use \code{as.list()} to recover the list of composite functions of a function
composition.
}
\section{Properties}{
 \code{compose()} is \emph{associative}, semantically and
operationally. This means, for instance, that
\code{compose(f, g, h)},
\code{compose(f, compose(g, h))},
\code{compose(compose(f, g), h)},
are implemented as the \emph{same function}. In other words, lists of functions
are automatically \dQuote{flattened out} when they are composed, so nested
compositions do not pile up.

\code{as.list()} and \code{compose()} are \emph{mutually invertible}.
\code{compose(as.list(f))} is the same as \code{f}, when \code{f} is a function.
\code{as.list(compose(fs))} is the same as \code{fs}, when \code{fs} is a list of
functions.
}

\examples{
# Functions are composed from right to left (following convention)
inv <- partial(`/`, 1)  # reciprocal
f <- compose(inv, log, abs)
stopifnot(all.equal(f(-2), 1 / log(abs(-2))))

# "Backward" composition operator composes from right to left, like compose()
f1 <- inv \%<<<\% log \%<<<\% abs
stopifnot(all.equal(f1(-2), f(-2)))

# Forward composition operator composes from left to right
f2 <- abs \%>>>\% log \%>>>\% inv
stopifnot(all.equal(f2(-2), f(-2)))

# Presume to_json()/from_json() convert to/from JSON
\dontrun{
json_out <- partial(`\%<<<\%`, to_json)    # transforms function to produce JSON
json_in  <- partial(`\%>>>\%`, from_json)  # transforms function to consume JSON
jsonify  <- json_in \%>>>\% json_out       # transforms function to JSON function
}

# Formals of initial function are preserved
first <- function(a, b = 0) a + b
stopifnot(identical(formals(compose(inv, first)), formals(first)))

# Compositions can be provided by lists, in several equivalent ways
f3 <- compose(list(inv, log, abs))
f4 <- compose(!!! list(inv, log, abs))
f5 <- compose(inv, list(log, abs))
f6 <- compose(inv, !!! list(log, abs))
stopifnot(
  all.equal(f3, f), all.equal(f3(-2), f(-2)),
  all.equal(f4, f), all.equal(f4(-2), f(-2)),
  all.equal(f5, f), all.equal(f5(-2), f(-2)),
  all.equal(f6, f), all.equal(f6(-2), f(-2))
)

# compose() and as.list() are mutally invertible
f7 <- compose(inv, as.list(compose(log, abs)))
stopifnot(
  all.equal(f7, f), all.equal(f7(-2), f(-2))
)
fs <- list(inv, log, abs)
stopifnot(all.equal(check.attributes = FALSE,
  as.list(compose(fs)), fs,
))

}
