% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/partial.R
\name{partial}
\alias{partial}
\alias{departial}
\title{Fix a number of arguments to a function}
\usage{
partial(..f, ...)

departial(..f)
}
\arguments{
\item{..f}{Function.}

\item{...}{Argument values of \code{..f} to fix, specified by name. Captured as
\link[rlang:quotation]{quosures}. \link[rlang:quasiquotation]{Quasiquotation} and
\link[rlang:quasiquotation]{splicing} are supported (see \emph{Examples}).?}
}
\value{
\code{partial()} returns a function whose \link[base:formals]{formals} are a
literal truncation of the formals of \code{..f()} (as a closure) by the fixed
arguments. \code{partial(..f)} is identical to \code{..f}.
}
\description{
\code{partial()} enables
\href{https://en.wikipedia.org/wiki/Partial_application}{partial function application}:
given a function, it fixes the value of selected arguments to produce a
function of the remaining arguments.

\code{departial()} \dQuote{inverts} the application of \code{partial()} by returning
the original function.
}
\section{Technical Note}{

Even while \code{partial()} truncates formals, it remains compatible with
functions that use \code{\link[base:missing]{missing()}} to test whether a
specified argument was supplied in a call. For example,
\code{draw3 <- partial(sample, size = 3)} works as a function that randomly
draws three elements, even though \code{sample()} invokes \code{missing(size)} and
\code{draw3()} has signature \code{function (x, replace = FALSE, prob = NULL)}.

Consequently, in rare cases, impure functions that depend on introspection
of the calling context may not be amenable to \code{partial()}. For example,
\code{partial(ls, all.names = TRUE)()} is not equivalent to
\code{ls(all.names = TRUE)}, because \code{ls()} inspects the calling environment to
produce its value and \code{partial(ls, all.names = TRUE)()} calls
\code{ls(all.names = TRUE)} from an (ephemeral) execution environment.
}

\examples{
draw3 <- partial(sample, size = 3)
draw3(letters)

# Use departial() to recover the original function
stopifnot(identical(departial(draw3), sample))

# Eagerly evaluate argument values by default (..eager = TRUE)
# The value of 'n' is fixed when the function rnd_eager() is created.
rnd_eager <- partial(runif, n = rpois(1, 5))
replicate(4, rnd_eager(), simplify = FALSE)   # constant (random) length

# Lazily evaluate argument values with ..eager = FALSE
# The expression for 'size' is evaluated whenever draw() is called.
# NB: The 'x' refers to the 'x' argument of sample().
draw <- partial(sample, size = sample(length(x), 1), ..eager = FALSE)
replicate(4, draw(letters), simplify = FALSE)  # variable length

# Unquote when you want to lazily evaluate but refer to an 'x' in scope
x <- 3
draw_upto_3 <- partial(sample, size = sample(!! x, 1), ..eager = FALSE)
replicate(4, draw_upto_3(letters), simplify = FALSE)  # variable length <= 3

# Mix evaluation schemes by combining lazy evaluation with unquoting (`!!`)
# Here 'n' is lazily evaluated, while 'max' is eagerly evaluated.
rnd <- partial(runif, n = rpois(1, 5), max = !! sample(10, 1), ..eager = FALSE)
replicate(4, rnd(), simplify = FALSE)

# Arguments to fix can be spliced
args_eager <- alist(n = rpois(1, 5), max = sample(10, 1))
rnd_eager2 <- partial(runif, !!! args_eager)
replicate(4, rnd_eager2(), simplify = FALSE)

args_mixed <- rlang::exprs(n = rpois(1, 5), max = !! sample(10, 1))
rnd2 <- partial(runif, !!! args_mixed, ..eager = FALSE)
replicate(4, rnd2(), simplify = FALSE)

# partial() truncates formals (i.e., argument signature) by fixed arguments
foo <- function(x, y = x, ..., z = "z") list(x = x, y = y, z = z, ...)
args(foo)
args(partial(foo))
args(partial(foo, x = 1))
args(partial(foo, x = 1, y = 2))
args(partial(foo, x = 1, y = 2, z = 3))

}
\seealso{
\code{\link[=curry]{curry()}}
}
