% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/partial.R
\name{partial}
\alias{partial}
\alias{departial}
\title{Fix a number of arguments to a function}
\usage{
partial(..f, ..., ..lazy = TRUE, ..env = parent.frame())

departial(..f)
}
\arguments{
\item{..f}{Function.}

\item{...}{Argument values of \code{..f} to fix, specified by name.
\link[rlang:quasiquotation]{Quasiquotation} and splicing are supported; see
\emph{Examples}.}

\item{..lazy}{Should the argument values be lazily evaluated? If \code{TRUE} (the
default), the argument values are captured as expressions; if \code{FALSE}, the
argument values are \link[rlang:eval_tidy]{tidily evaluated}.}

\item{..env}{Environment in which to evaluate the argument values to fix.}
}
\value{
\code{partial()} returns a function whose \link[base:formals]{formals} are a
contraction of the formals of \code{..f()} (as a closure) by the fixed
arguments. \code{partial(..f)} is identical to \code{..f}.
}
\description{
\code{partial()} enables
\href{https://en.wikipedia.org/wiki/Partial_application}{partial function application}:
given a function, it fixes the value of selected arguments to produce a
function of the remaining arguments.

\code{departial()} inverts the application of \code{partial()}.
}
\examples{
draw3 <- partial(sample, size = 3)
draw3(letters)

# Use departial() to recover the original function
departial(draw3)  # sample()

# Arguments are lazily evaluated by default, i.e., whenever rnd_lazy() is called
rnd_lazy <- partial(runif, n = rpois(1, 5))
replicate(4, rnd_lazy(), simplify = FALSE)   # variable length

# Arguments can be eagerly evaluated, i.e., when rnd_eager() is created
rnd_eager <- partial(runif, n = rpois(1, 5), ..lazy = FALSE)
replicate(4, rnd_eager(), simplify = FALSE)  # constant length

# Arguments can be eagerly evaluated, selectively, via unquoting
rnd <- partial(runif, n = !! rpois(1, 5), max = sample(10, 1))
replicate(4, rnd(), simplify = FALSE)

# Arguments to fix can be spliced
args_eager <- list(n = rpois(1, 5), max = sample(10, 1))
rnd_eager3 <- partial(runif, !!! args_eager)
replicate(4, rnd_eager3(), simplify = FALSE)
args_mixed <- rlang::exprs(n = !! rpois(1, 5), max = sample(10, 1))
rnd2 <- partial(runif, !!! args_mixed)
replicate(4, rnd2(), simplify = FALSE)

# partial() contracts formals (i.e., argument signature)
foo <- function(x, y = x, ..., z = "z") list(x = x, y = y, z = z, ...)
args(foo)
args(partial(foo))
args(partial(foo, x = 1))
args(partial(foo, x = 1, y = 2))
args(partial(foo, x = 1, y = 2, z = 3))

}
\seealso{
\code{\link[=curry]{curry()}}
}
