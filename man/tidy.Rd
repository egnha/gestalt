% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy.R
\name{tidy}
\alias{tidy}
\alias{is_tidy}
\alias{untidy}
\title{Make a function tidy}
\usage{
tidy(f)

is_tidy(x)

untidy(f)
}
\arguments{
\item{f}{Function.}

\item{x}{Object to test: Is it a tidy function?}
}
\value{
\code{tidy()} returns a tidy function.

\code{is_tidy()} returns \code{TRUE} for void functions and functions made by
\code{tidy()}, and \code{FALSE} otherwise.

\code{untidy()} recovers the “untidy” function underlying a function made
by \code{tidy()}.
}
\description{
A \strong{tidy function} is a function whose arguments support unquoting (\code{!!})
and (\code{!!!}) splicing, i.e., \link[rlang:quasiquotation]{quasiquotation}. \code{tidy()}
enhances a function by making it tidy.
}
\examples{
f <- function(x, y, ..., z = "z") list(x, y, z, ...)
f_tidy <- tidy(f)

stopifnot(
  # Make ordinary calls as usual
  identical(
    f_tidy("x", "y", "w"),
    f("x", "y", "w")
  ),
  # Splice arguments using ‘!!!’
  identical(
    f_tidy(y = "y", !!!list("x", a = "a", "b", c = "c")),
    f(y = "y", "x", a = "a", "b", c = "c")
  ),
  # tidy() is the identity for tidy functions
  identical(
    f_tidy, tidy(f_tidy)
  )
)

x <- local({
  val <- "local value"
  rlang::quo(val)
})
stopifnot(
  # Unquote values using ‘!!’ to evaluate them immediately
  identical(
    f_tidy(!!x, "y"),
    f("local value", "y")
  )
)
stopifnot(
  is_tidy(tidy(f)),
  !is_tidy(f),
  !is_tidy(untidy(tidy(f)))
)
stopifnot(
  # untidy() recovers the “untidy” function underlying a tidy function
  identical(f, untidy(tidy(f))),
  identical(f, untidy(f))
)
}
