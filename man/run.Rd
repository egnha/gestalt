% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.R
\name{run}
\alias{run}
\alias{let}
\title{Run an Action in an Ordered Context}
\usage{
let(`_data` = parent.frame(), ...)

run(`_data` = parent.frame(), `_expr`, ...)
}
\arguments{
\item{...}{Named expressions. An expression depends on the preceding ones,
and its name takes precedence over those in \code{`_data`}.
\link[rlang:quasiquotation]{Quasiquotation} of names and expressions is
supported (see ‘Examples’).}

\item{`_data`}{Context of named values, namely an environment, list or data
frame; if a list or data frame, it is interpreted as an environment (like
the \code{envir} argument of \code{\link[=eval]{eval()}}).}

\item{`_expr`}{Expression to evaluate (“run”). Quasiquotation is supported.}
}
\value{
\code{run()} returns the evaluation of \code{`_expr`} in the combined
environment of \code{`_data`} and \code{...}.

\code{let()} returns an environment where the bindings in \code{...} are in scope, as
\link[=delayedAssign]{promises}, as if they were assigned from left to right in
the environment defined by \code{`_data`}.
}
\description{
Using R typically involves:
\enumerate{
\item Making a context—assigning a set of values.
\item Performing an action—evaluating an expression relative to a context.
}

\code{let()} and \code{run()} enable you to treat these procedures as reusable,
\emph{composable} components.
\itemize{
\item \code{let()} makes a \strong{context}: it binds a sequence of \emph{ordered} named
expressions to a given environment (by default, the current one).

For instance, in an environment \code{env} where \code{z} is in scope,\preformatted{  let(x = 1, y = x + 2, z = x * y * z, `_data` = env)
}

is equivalent to calling\preformatted{  local({
    x <- 1
    y <- x + 2
    z <- x * y * z
    environment()
  })
}

except \code{let()} binds the named expressions \emph{lazily}, as
\link[=delayedAssign]{promises}, and comprehends tidyverse
\link[rlang:quasiquotation]{quasiquotation}.
\item \code{run()} performs an \strong{action}: it evaluates an expression relative to an
environment (by default, the current one) and, optionally, a sequence of
ordered named expressions.

For instance, in an environment \code{env} where \code{x} is in scope,\preformatted{  run(x + y + z, y = x + 2, z = x * y * z, `_data` = env)
}

is equivalent to calling\preformatted{  local({
    y <- x + 2
    z <- x * y * z
    x + y + z
  })
}

except \code{run()}, like \code{let()}, binds \code{y} and \code{z} \emph{lazily} and comprehends
quasiquotation.
}
}
