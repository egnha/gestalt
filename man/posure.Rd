% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/posure.R
\name{posure}
\alias{posure}
\title{External Dependencies as Function Arguments}
\usage{
posure(..., ..env = parent.frame())
}
\arguments{
\item{...}{Function declaration whose body evaluates to a \emph{composite
function}, as declared using \code{\link[=compose]{compose()}} or \code{\link{\%>>>\%}}. Quasiquotation is
supported. The syntax is same as that of \code{\link[=fn]{fn()}}.}

\item{..env}{Environment in which to create the function. Usually, you should
not need to set this.}
}
\value{
Function.
}
\description{
\code{posure()} allows you to reference external dependencies of a function (i.e.,
unbound names in its body) as function arguments, which are \emph{locally scoped}.
}
\examples{
# A posure is a composition with (dynamically scoped) dependencies:

foo <- posure(b = 2, n ~ {
  sample \%>>>\% log(base = b) \%>>>\% rep(n)
})

# A posure is a composite function with dependencies:
foo

set.seed(1)
foo(2^(1:10), size = 2, n = 3)
#> [1] 3 4 3 4 3 4

set.seed(1)
rep(log(sample(2^(1:10), size = 2), base = 2), 3)
#> [1] 3 4 3 4 3 4

# However, a 'posure()' does the composition upfront, so it is faster
# than the equivalent function defined using the magrittr pipe:

library(magrittr)  # Provides the pipe \%>\%

foo_pipe <- function(..., b = 2, n) {
  sample(...) \%>\% log(base = b) \%>\% rep(n)
}

set.seed(1)
foo_pipe(2^(1:10), size = 2, n = 3)
#> [1] 3 4 3 4 3 4

# Moreover, posures are safer than functions defined using the pipe,
# because '\%>>>\%' validates constituent functions:
\donttest{
posure(b = 2, n ~ log(Base = b) \%>>>\% rep(n))
# Error: unused argument (Base = b)

posure(b = 2 ~ my_sample \%>>>\% log(base = b))
# Error: object 'my_sample' not found}

}
