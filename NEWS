# nofrills

## 0.3.0.9000

  * The function transformer `tidy()` is introduced. It enhances functions by
    enabling them to support unquoting and splicing of arguments, i.e.,
    quasiquotation. This is handy when you want a function written by someone
    else to comprehend quasiquotation. Apply `untidy()` to undo `tidy()`.

  * Rather than performing strict currying, `curry()` now curries functions in a
    manner congenial to R’s calling convention. This means you can now call a
    curried function on any number of arguments: if the supplied arguments are
    complete, you get the function’s return value on those arguments; otherwise,
    you get a function of the remaining arguments with the supplied arguments
    fixed, which itself is a curried function. This yields a more flexible, yet
    less verbose, syntax for constructing functions via currying than is
    possible with a strict currying operator. Currying can be undone with
    `uncurry()`. As before, `curry()` remains an idempotent operator, i.e.,
    currying an already curried function is the identity operator.

  * `curry_fn()` has been renamed to `fn_curry()`. It is now an alias for the
    composition of `fn()` followed by `curry()`.

  * Compositions are available with the `compose()` function and its operator
    forms `%<<<%` and `%>>>%` (forward composition). Crucially, `compose()`
    is associative, both semantically and operationally, which prevents nested
    compositions from piling up. Additionally, `compose()` preserves the formals
    of the initial function called, i.e., `compose()` returns a function of the
    proper “type.” `decompose()` inverts `compose()` by returning the list of
    composite functions, enabling you to inspect and modify function
    compositions.

  * Partial application is available via the operator `partial()`, along with
    its inverse operator `departial()`. Like genuine partial application,
    `partial()` contracts formals, rather than producing a function with
    indefinite formals `...`, i.e., `partial()` returns a function of the
    proper “type.” Quasiquotation and splicing of arguments are supported, in
    addition to argument-wise lazy or eager (tidy) evaluation.

  * `as_fn()` and `make_fn_aware()` are softly deprecated.

  * rlang >= 0.2.0 is now required, as that version substantially accelerated
    expression capture and tidy evaluation.

## 0.3.0

  * Currying operators `curry()` and `curry_fn()` are introduced (#10). Notably,
    `curry_fn()` supports quasiquotation, which enables more easily inspectable
    functions. For example:
    ```
    compare_to <- curry_fn(target, x ~ identical(x, QUQ(target)))
    print(compare_to("this"))
    #> function (x)
    #> identical(x, "this")
    ```

  * `fn()` now accepts closures as part of the body. In particular, nested calls
    of `fn()` can be unquoted, e.g., `fn(x ~ !!fn(y ~ !!fn(z ~ x + y + z)))`
    yields `function(x) function(y) function(z) x + y + z`.

  * Literal unquoting operators `QUQ()`, `QUQS()` now resolve to their
    bang-operator forms (`!!`, `!!!`), rather than their functional aliases
    (`UQ()`, `UQS()`), as these aliases are slated for potential deprecation in
    rlang (#9). `rlang::UQE()` has already been axed, so `QUQE()` is gone too.

## 0.2.1

  * Tests are now compatible with testthat 2.0.0.

  * Alias `..()` is removed.

## 0.2.0

  * `fn()` now comprehends literal unquoting operators via the use of `QUQ()`,
    `QUQS()` and `QUQE()`. This allows you to make functions with `fn()` that
    contain unquoting operators, which is handy when programming with dplyr or
    other tidyverse packages.

  * `make_fn_aware()` is a new functional operator that enhances a function by
    enabling it to interpret abbreviated functional arguments (cf. `as_fn()`).

  * In order to keep the package namespace slim, `..()` has been softly
    deprecated.

## 0.1.0

  * Initial release
